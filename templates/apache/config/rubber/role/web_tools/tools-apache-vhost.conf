<%
  @path = "/etc/apache2/sites-available/#{rubber_env.app_name}-tools"
  @post = "a2enmod rewrite && a2enmod ssl && a2enmod proxy_http && a2enmod proxy_html && a2enmod ext_filter && a2ensite #{rubber_env.app_name}-tools"
%>

Listen <%= rubber_env.web_tools_port %>
<VirtualHost *:<%= rubber_env.web_tools_port %>>
  ServerName      <%= rubber_env.full_host %>

  RewriteEngine   on
  RewriteCond     %{HTTPS} !=on
  RewriteRule     ^/(.*)$ https://%{SERVER_NAME}:<%= rubber_env.web_tools_ssl_port %>/$1 [L,R]
  RewriteLog      "/var/log/apache2/rewrite.log"
</VirtualHost>

Listen <%= rubber_env.web_tools_ssl_port %>
<VirtualHost *:<%= rubber_env.web_tools_ssl_port %>>
  ServerName      <%= rubber_env.full_host %>
  DocumentRoot    /var/www

  SSLEngine on
  SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire
  SSLCertificateFile    /etc/ssl/certs/ssl-cert-snakeoil.pem
  SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key
  # SSLCertificateFile <%= RUBBER_ROOT %>/config/<%= rubber_env.domain %>.crt
  # SSLCertificateKeyFile <%= RUBBER_ROOT %>/config/<%= rubber_env.domain %>.key
  # SSLCertificateChainFile /etc/ssl/certs/gd_intermediate_bundle.crt

  <Location />
    AuthType Basic
    AuthName "Rubber Admin Tools"
    AuthUserFile <%= RUBBER_ROOT %>/config/<%= rubber_env.app_name %>.auth
    Require valid-user

    Allow from all
  </Location>

  SetOutputFilter  proxy-html

  <% rubber_instances.for_role('haproxy').each do |ic| %>
    ProxyPass /haproxy_<%= ic.name %>/  http://<%= ic.full_name %>:<%= rubber_env.haproxy_admin_port %>/haproxy/
    <Location /haproxy_<%= ic.name %>/>
      ProxyPassReverse /
      ProxyHTMLURLMap http://<%= ic.full_name %>:<%= rubber_env.haproxy_admin_port %>/ /haproxy_<%= ic.name %>/
      ProxyHTMLURLMap /haproxy/ /haproxy_<%= ic.name %>/
      ProxyHTMLURLMap /haproxy /haproxy_<%= ic.name %>/
    </Location>
  <% end %>

  <% if cruise_host = rubber_instances.for_role('cruise').first %>
    ProxyPass /cruise/  http://<%= cruise_host.full_name %>:<%= rubber_env.cruise_port %>/
    <Location /cruise/>
      ProxyPassReverse /
      ProxyHTMLURLMap http://<%= cruise_host.full_name %>:<%= rubber_env.cruise_port %>/ /cruise/
      ProxyHTMLURLMap / /cruise/
    </Location>
  <% end %>

  <% rubber_instances.each do |ic| %>
    ProxyPass /monit_<%= ic.name %>/ http://<%= ic.full_name %>:<%= rubber_env.monit_admin_port %>/
    <Location /monit_<%= ic.name %>/>
      ProxyPassReverse /
      ProxyHTMLURLMap http://<%= ic.full_name %>:<%= rubber_env.monit_admin_port %>/ /monit_<%= ic.name %>/
      ProxyHTMLURLMap / /monit_<%= ic.name %>/
    </Location>
  <% end %>

<%
  proxies = {}
  proxies['resque'] = "http://#{rubber_instances.for_role('resque_web').first.full_name}:#{rubber_env.resque_web_port}/" if rubber_instances.for_role('resque_web').first
  proxies['graphite'] = "http://#{rubber_instances.for_role('graphite_web').first.full_name}:#{rubber_env.graphite_web_port}/" if rubber_instances.for_role('graphite_web').first
%>

<%
  proxies.each do |host, proxy_url|
%>
  <VirtualHost *:<%= rubber_env.web_tools_ssl_port %>>
    ServerName      <%= host %>.<%= rubber_env.full_host %>
    DocumentRoot    /var/www

    SSLEngine on
    SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire

    <% if RUBBER_ENV == 'production' -%>
    SSLCertificateFile      /etc/ssl/certs/tools.mogotest.com.crt
    SSLCertificateKeyFile   /etc/ssl/private/tools.mogotest.com.key
    SSLCertificateChainFile /etc/ssl/certs/mogotest.com.ca-bundle
    <% elsif RUBBER_ENV == 'kevin' %>
    SSLCertificateFile      /etc/ssl/certs/kevin.mogotest.com.crt
    SSLCertificateKeyFile   /etc/ssl/private/kevin.mogotest.com.key
    SSLCertificateChainFile /etc/ssl/certs/mogotest.com.ca-bundle
    <% else -%>
    SSLCertificateFile    /etc/ssl/certs/ssl-cert-snakeoil.pem
    SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key
    <% end -%>

    <Location />
      AuthType Basic
      AuthName "Rubber Admin Tools"
      AuthUserFile <%= Rubber.root %>/config/<%= rubber_env.app_name %>.auth
      Require valid-user

      Allow from all
    </Location>

    ProxyRequests Off
    ProxyPreserveHost On

    ProxyPass /  <%= proxy_url %>
    <Location />
      ProxyPassReverse /
    </Location>

    # Fix any redirects occurring on the backend server, since we're communicating with it via HTTP.
    Header edit Location ^http://<%= host %>.<%= rubber_env.full_host %>:<%= rubber_env.web_tools_ssl_port %>/ https://<%= host %>.<%= rubber_env.full_host %>:<%= rubber_env.web_tools_ssl_port %>/
  </VirtualHost>

</VirtualHost>
