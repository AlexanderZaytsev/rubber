<%
  @path = "/etc/apache2/sites-available/#{rubber_env.app_name}-tools"
  @post = "a2enmod rewrite && a2enmod ssl && a2enmod proxy_http && a2enmod proxy_html && a2enmod ext_filter && a2ensite #{rubber_env.app_name}-tools"
%>

Listen <%= rubber_env.web_tools_port %>
<VirtualHost *:<%= rubber_env.web_tools_port %>>
  ServerName      <%= rubber_env.full_host %>

  RewriteEngine   on
  RewriteCond     %{HTTPS} !=on
  RewriteRule     ^/(.*)$ https://%{SERVER_NAME}:<%= rubber_env.web_tools_ssl_port %>/$1 [L,R]
  RewriteLog      "/var/log/apache2/rewrite.log"
</VirtualHost>

Listen <%= rubber_env.web_tools_ssl_port %>
<VirtualHost *:<%= rubber_env.web_tools_ssl_port %>>
  ServerName      <%= rubber_env.full_host %>
  DocumentRoot    /var/www

  SSLEngine on
  SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire
  SSLCertificateFile    /etc/ssl/certs/ssl-cert-snakeoil.pem
  SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key
  # SSLCertificateFile <%= RUBBER_ROOT %>/config/<%= rubber_env.domain %>.crt
  # SSLCertificateKeyFile <%= RUBBER_ROOT %>/config/<%= rubber_env.domain %>.key
  # SSLCertificateChainFile /etc/ssl/certs/gd_intermediate_bundle.crt

  <Location />
    AuthType Basic
    AuthName "Rubber Admin Tools"
    AuthUserFile <%= RUBBER_ROOT %>/config/<%= rubber_env.app_name %>.auth
    Require valid-user

    Allow from all
  </Location>

  SetOutputFilter  proxy-html

  <% rubber_instances.for_role('haproxy').each do |ic| %>
    ProxyPass /haproxy_<%= ic.name %>/  http://<%= ic.full_name %>:<%= rubber_env.haproxy_admin_port %>/haproxy/
    <Location /haproxy_<%= ic.name %>/>
      ProxyPassReverse /
      ProxyHTMLURLMap http://<%= ic.full_name %>:<%= rubber_env.haproxy_admin_port %>/ /haproxy_<%= ic.name %>/
      ProxyHTMLURLMap /haproxy/ /haproxy_<%= ic.name %>/
      ProxyHTMLURLMap /haproxy /haproxy_<%= ic.name %>/
    </Location>
  <% end %>

  <% if cruise_host = rubber_instances.for_role('cruise').first %>
    ProxyPass /cruise/  http://<%= cruise_host.full_name %>:<%= rubber_env.cruise_port %>/
    <Location /cruise/>
      ProxyPassReverse /
      ProxyHTMLURLMap http://<%= cruise_host.full_name %>:<%= rubber_env.cruise_port %>/ /cruise/
      ProxyHTMLURLMap / /cruise/
    </Location>
  <% end %>

  <% rubber_instances.each do |ic| %>
    ProxyPass /monit_<%= ic.name %>/ http://<%= ic.full_name %>:<%= rubber_env.monit_admin_port %>/
    <Location /monit_<%= ic.name %>/>
      ProxyPassReverse /
      ProxyHTMLURLMap http://<%= ic.full_name %>:<%= rubber_env.monit_admin_port %>/ /monit_<%= ic.name %>/
      ProxyHTMLURLMap / /monit_<%= ic.name %>/
    </Location>
  <% end %>

  <% if resque_host = rubber_instances.for_role('resque_web').first %>
    ProxyPass /resque/  http://<%= resque_host.full_name %>:<%= rubber_env.resque_web_port %>/
    # special case, sinatra is using X-Forwarded-Host header to set redirects (Location header) to our external address, so we have to rewrite that to the right path
    ProxyPassReverse /resque/ http://<%= rubber_env.full_host %>:<%= rubber_env.web_tools_ssl_port %>/
    <Location /resque/>
      ProxyPassReverse /
      ProxyHTMLURLMap http://<%= resque_host.full_name %>:<%= rubber_env.resque_web_port %>/ /resque/
      ProxyHTMLURLMap / /resque/
    </Location>
  <% end %>

  <% if graphite_host = rubber_instances.for_role('graphite_web').first %>
    # Needed for graphite for containing frameset in webui
    ProxyHTMLLinks  frame           src longdesc

    SetEnvIf Request_URI "/ext" isextjs
    SetEnvIf Request_URI "/jquery" isextjs
    ExtFilterDefine fix_graphite_js mode=output cmd="/bin/sed /RENDER_BASE_URL.replace/!\ s%\\([\'\"]\\)/\\([^/\'\"]\\)%\\1/graphite/\\2%g" enableenv=graphite_proxy disableenv=isextjs
    ExtFilterDefine fix_graphite_css mode=output intype=text/css cmd="/bin/sed s/\\(url([\'\"]*\\)\\//\\1\\/graphite\\//g" enableenv=graphite_proxy

    ProxyPass /graphite/  http://<%= graphite_host.full_name %>:<%= rubber_env.graphite_web_port %>/
    <Location /graphite/>
      SetEnv graphite_proxy
      # can't proxy gzip encoded data
      RequestHeader unset Accept-Encoding
      ProxyPassReverse /
      # X-Forwarded-Host header used to set redirects (Location header) to
      # our external address, so we have to rewrite that to the right path
      ProxyPassReverse http://<%= rubber_env.full_host %>:<%= rubber_env.web_tools_ssl_port %>/
      ProxyHTMLURLMap http://<%= graphite_host.full_name %>:<%= rubber_env.graphite_web_port %>/ /graphite/
      ProxyHTMLURLMap / /graphite/ c
      ProxyHTMLURLMap ([\"\'])/([^/]) $1/graphite/$2 R

      AddOutputFilterByType fix_graphite_js application/javascript text/plain
      AddOutputFilterByType fix_graphite_css text/css
    </Location>
  <% end %>
</VirtualHost>
